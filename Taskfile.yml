# SPDX-License-Identifier: LGPL-2.1-or-later

# https://taskfile.dev

version: '3'

dotenv: [".env","tag.env","container.env"]

vars:
  LOCAL_CONTAINER: "localhost/${REPO}:latest"

tasks:
  # HOST
  install:pacman:devtools:
    description: "Installs devtools for the pacman package manager (Arch)"
    cmds:
      - cmd: pacman -S go-task podman qemu-user-static qemu-user-static-binfmt
        platforms: ["linux"]

  install:dnf:devtools:
    description: "Installs devtools for the dnf package manager (Fedora)"
    cmds:
      - cmd: dnf go-task podman qemu-user-static qemu-user-binfmt
        platforms: ["linux"]

  install:winget:devtools:
    description: "Installs the devtools for the winget package manager (DOS)"
    cmds:
      - cmd: winget install Redhat.Podman Task.Task --source winget
        platform: ["windows"]

  # BUILD
  build:
    description: "Generic build"
    cmds:
      - cmd: "gcc -o /usr/local/bin/bd_chapters ./src/bd_chapters.c -lbluray"
        platform: ["linux", "darwin"]


  # CONTAINERS
  container:clean:
    description: "Cleans the latest container images from cache"
    cmds:
      - task: container:clean:local
      - task: container:clean:prune

  container:clean:prune:
    description: "PRUNES the podman image cache (potentially destructive)"
    cmds:
      - cmd: podman image prune -f

  container:clean:local:
    description: "Deletes the local image cache"
    cmds:
      - cmd: podman image rm {{ .LOCAL_CONTAINER }}


  container:build:
    description: "Builds the local building container"
    sources:
      - src/**/*.c
      - Containerfile
    cmds:
      - podman manifest create bd_chapters:manifest
      - defer: podman manifest rm bd_chapters:manifest
      # --platform "linux/amd64,linux/arm64,linux/riscv64" --jobs 3
      - >
          podman build
          --manifest bd_chapters:manifest
          --layers --squash-all
          . -f ./Containerfile
      - podman tag bd_chapters:manifest {{ .LOCAL_CONTAINER }}

  container:run:
    description: "Runs the localy built container. (Provide your own podman args)"
    deps:
      - task: container:build
    cmds:
      - cmd: podman run {{ .LOCAL_CONTAINER }} {{ .CLI_ARGS }}

  container:run:root:
    description: "Runs on mounted root  (provide full path)"
    deps:
      - task: container:build
    cmds:
      - cmd: podman run --rm --volume=/:/hostroot:ro --workdir=/hostroot -i {{ .LOCAL_CONTAINER }} -- ./{{ .CLI_ARGS }}

  container:run:dot:
    description: "Runs in mounted .  (provide relative path)"
    deps:
      - task: container:build
    cmds:
      - cmd: podman run --rm --volume=.:/hostdot:ro --workdir=/hostdot -i {{ .LOCAL_CONTAINER }} -- ./{{ .CLI_ARGS }}

  container:run:cdrom:
    description: "Runs with cdrom mounted  (provide cmd args)"
    deps:
      - task: container:build
    cmds:
      - cmd: podman run --rm --device=/dev/cdrom:/dev/cdrom:r -i {{ .LOCAL_CONTAINER }} -- /dev/cdrom {{ .CLI_ARGS }}
